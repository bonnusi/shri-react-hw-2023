{
  "extends": [
    "airbnb",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:react-hooks/recommended"
  ],
  "env": {
    "browser": true,
    "jest": true
  },
  "plugins": [
    "react",
    "jsx-a11y",
    "import",
    "@typescript-eslint"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 6,
    "sourceType": "module",
    "projectFolderIgnoreList": [],
    "ecmaFeatures": {
      "jsx": true,
      "modules": true,
      "experimentalObjectRestSpread": true
    }
  },
  "rules": {
    "indent": "off",
    "@typescript-eslint/indent": ["error", 2],
    "no-use-before-define": "off",
    "@typescript-eslint/no-use-before-define": ["error"],
    "import/extensions": "off",
    "no-shadow": "off",
    "@typescript-eslint/no-shadow": ["error"],
    "template-curly-spacing" : "off",
    "arrow-parens": [
      "error",
      "always"
    ],
    "react/forbid-prop-types": 0,
    "react/jsx-filename-extension": 0,
    "react/jsx-indent": [2],
    "react/jsx-indent-props": [2],
    "react/jsx-props-no-spreading": "off",
    "react/jsx-one-expression-per-line": "off",
    "react/button-has-type": "off",
    "@typescript-eslint/no-misused-promises": [2, {
      "checksVoidReturn": {
        "attributes": false
      }
    }],
    "react/require-default-props": "off",
    "jsx-a11y/label-has-associated-control": [
      2,
      {
        "assert": "either" // either check for `htmlFor` or `nesting`
      }
    ],
    "padded-blocks": [
      "error",
      {
        "classes": "always"
      }
    ],
    "class-methods-use-this": 0,
    "react/prefer-stateless-function": 0,
    "no-nested-ternary": 0,
    "jsx-a11y/anchor-is-valid": 0,
    "jsx-a11y/label-has-for": [
      2,
      {
        "components": [
          "label"
        ],
        "required": {
          "some": [
            "nesting",
            "id"
          ]
        },
        "allowChildren": false
      }
    ],
    "no-param-reassign": 0,
    "import/prefer-default-export": "off",
    "max-len": ["error", { "code": 140 }],
    "@typescript-eslint/type-annotation-spacing": ["error"],
    "@typescript-eslint/no-unsafe-call": 0,
    "@typescript-eslint/no-unsafe-member-access": 0,
    "@typescript-eslint/no-unsafe-assignment": 0,
    "@typescript-eslint/unbound-method": 0,
    "@typescript-eslint/no-explicit-any": "error",
    "react-hooks/exhaustive-deps": "warn",
    "no-restricted-syntax": [
      "error",
      {
        "selector": "Identifier[name='getServerSideProps']",
        "message": "getServerSideProps is not allowed to be used"
      },
      {
        "selector": "AssignmentExpression[left.property.name='getInitialProps']",
        "message": "getInitialProps is not allowed to be used"
      }
    ],
    "padding-line-between-statements": [
			"error",
			// Always require blank lines after directive (like "use-strict"), except between directives
			{ "blankLine": "always", "prev": "directive", "next": "*" },
			{ "blankLine": "any", "prev": "directive", "next": "directive" },
			// Always require blank lines after import, except between imports
			{ "blankLine": "always", "prev": "import", "next": "*" },
			{ "blankLine": "any", "prev": "import", "next": "import" },
			// Always require blank lines before and after every sequence of variable declarations and export
			{
				"blankLine": "always",
				"prev": "*",
				"next": ["const", "let", "var", "export"]
			},
			{
				"blankLine": "always",
				"prev": ["const", "let", "var", "export"],
				"next": "*"
			},
			{
				"blankLine": "any",
				"prev": ["const", "let", "var", "export"],
				"next": ["const", "let", "var", "export"]
			},
			// Always require blank lines before and after class declaration, if, do/while, switch, try
			{
				"blankLine": "always",
				"prev": "*",
				"next": ["if", "class", "for", "do", "while", "switch", "try"]
			},
			{
				"blankLine": "always",
				"prev": ["if", "class", "for", "do", "while", "switch", "try"],
				"next": "*"
			},
			// Always require blank lines before return statements
			{ "blankLine": "always", "prev": "*", "next": "return" }
		],
    "import/order": [
			"warn",
			{
				// All other groups (relative imports) are implicitly added as last group
				"groups": [["builtin", "external"], "internal"],
				"newlines-between": "always",
				"alphabetize": {
					"order": "asc"
				}
			}
		]
  },
  "settings": {
    "import/parsers": {
      "@typescript-eslint/parser": [
        ".ts",
        ".tsx"
      ]
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true
      }
    }
  },
  "overrides": [
    {
      "parserOptions": {
        "project": "tsconfig.json"
      },
      "files": ["**/*.tsx"],
      "rules": {
        "react/prop-types": "off"
      }
    }
  ]
}
